function onOpen() {
  var ui = SpreadsheetApp.getUi();
  var menu = ui.createMenu("üìå Despachos padronizados");
  menu.addItem("üìú Despacho","despacho")
        .addToUi();
}

/**
 * Helper function to normalize string values for comparison.
 * @param {any} value The value to normalize.
 * @returns {string} The normalized string (trimmed, uppercase).
 */
function normalizeString(value) {
  return String(value || '').trim().toUpperCase();
}

/**
 * Helper function to show a standardized error alert.
 * @param {GoogleAppsScript.Base.Ui} ui The UI object.
 * @param {string} message The message to display.
 */
function showErrorAlert(ui, message) {
  ui.alert("Erro", message, ui.ButtonSet.OK);
}

/**
 * Validates the active sheet and selected row.
 * @param {GoogleAppsScript.Spreadsheet.Sheet} sh The active sheet.
 * @param {GoogleAppsScript.Base.Ui} ui The UI object.
 * @param {string} expectedSheetName The name of the expected sheet.
 * @returns {number | null} The active row index (1-based) if valid, otherwise null.
 */
function validateActiveRow(sh, ui, expectedSheetName) {
  if (sh.getName() !== expectedSheetName) {
    showErrorAlert(ui, `Por favor, navegue para a aba '${expectedSheetName}' e selecione a linha desejada antes de executar esta fun√ß√£o.`);
    return null;
  }

  const activeRange = sh.getActiveRange();
  // Assume que a linha 1 √© o cabe√ßalho
  if (!activeRange || activeRange.getHeight() > 1 || activeRange.getRow() <= 1) {
    showErrorAlert(ui, `Por favor, selecione uma √∫nica c√©lula ou a linha de dados que deseja processar na aba '${expectedSheetName}'.`);
    return null;
  }
  return activeRange.getRow();
}

/**
 * Extracts initial data from a selected row.
 * @param {Array<any>} selectedRowData The array of data from the selected row.
 * @returns {Object} An object containing the extracted initial data.
*/
function extractInitialData(selectedRowData) {
  return {
    prof_saiu: selectedRowData[18],        // Coluna S - Profissional a ser substitu√≠do (√≠ndice 18)
    mot_cont_achado: selectedRowData[20],  // Coluna U - Motivo da Contrata√ß√£o (√≠ndice 20)
    cargo_cdc_achado: selectedRowData[5],  // Coluna F - Cargo (√≠ndice 5)
    especialidade_cdc_achado: selectedRowData[6], // Coluna G - Especialidade (√≠ndice 6)
    unidade_achado: selectedRowData[11],   // Coluna L - Unidade/Lota√ß√£o (√≠ndice 11)
    area_at_cdc_achado: selectedRowData[14], // Coluna O - √Årea de Atua√ß√£o (√≠ndice 14)
    clas_cdc_achado: selectedRowData[13],  // Coluna N - Classifica√ß√£o (√≠ndice 13)
    cargaH_cdc_achado: selectedRowData[8], // Coluna I - Carga Hor√°ria (√≠ndice 8)
    equipe_cdc_achado: selectedRowData[10] // Coluna K - Equipe (√≠ndice 10)
  };
}

/**
 * Validates the extracted initial data.
 * @param {GoogleAppsScript.Base.Ui} ui The UI object.
 * @param {Object} initialData The object containing initial data.
 * @returns {boolean} True if all required fields are present, false otherwise.
 */
function validateInitialData(ui, initialData) {
  const fieldsToValidate = {
    prof_saiu: 'Profissional a ser substitu√≠do (Coluna S)',
    mot_cont_achado: 'Motivo da Contrata√ß√£o (Coluna U)',
    cargo_cdc_achado: 'Cargo (Coluna F)',
    especialidade_cdc_achado: 'Especialidade (Coluna G)',
    unidade_achado: 'Lota√ß√£o/Unidade (Coluna L)',
    area_at_cdc_achado: '√Årea de Atua√ß√£o (Coluna O)',
    clas_cdc_achado: 'Classifica√ß√£o (Coluna N)',
    cargaH_cdc_achado: 'Carga Hor√°ria (Coluna I)',
    equipe_cdc_achado: 'Equipe (Coluna K)'
  };

  for (const key in fieldsToValidate) {
    if (normalizeString(initialData[key]) === "") {
      showErrorAlert(ui, `Erro na aba 'Despachos': O campo '${fieldsToValidate[key]}' est√° vazio para a linha selecionada.`);
      return false;
    }
  }
  return true;
}

/**
 * Formats a date string (YYYY-MM-DD) to dd/MM/yyyy.
 * @param {string} dateInput The date string in YYYY-MM-DD format.
 * @returns {string} The formatted date string.
 * @throws {Error} If the date format is invalid or formatting fails.
 */
function formatInputDate(dateInput) {
  try {
    const dateObj = new Date(dateInput + 'T00:00:00'); // Adds T00:00:00 to avoid timezone issues
    if (isNaN(dateObj.getTime())) { // Use .getTime() for robust NaN check
      throw new Error("Formato de data inv√°lido. Use AAAA-MM-DD.");
    }
    return Utilities.formatDate(dateObj, SpreadsheetApp.getActiveSpreadsheet().getSpreadsheetTimeZone(), "dd/MM/yyyy");
  } catch (e) {
    throw new Error("Erro ao formatar a data: " + e.message);
  }
}

/**
 * Determines the 'inciso_atual' and 'repo_dataf_texto' based on the inciso option.
 * @param {number} inciso_sim_value The numeric value of the inciso option.
 * @param {string} repo_dataf_raw The raw replacement date from the form (if applicable).
 * @returns {Object} An object with inciso_atual and repo_dataf_texto.
 * @throws {Error} If inciso option is invalid or required data is missing.
 */
function getIncisoDetails(inciso_sim_value, repo_dataf_raw) {
  let inciso_atual;
  let repo_dataf_texto;

  switch (inciso_sim_value) {
    case 1: // TEMPOR√ÅRIO 2 ANOS - Inciso IV
      inciso_atual = "Lei 11175/2019, Art. 2¬∫, Inciso IV - car√™ncia de pessoal em decorr√™ncia de afastamentos ou licen√ßa de servidores.";
      if (!repo_dataf_raw) {
        throw new Error("Data fim da reposi√ß√£o n√£o informada para inciso tempor√°rio.");
      }
      repo_dataf_texto = formatInputDate(repo_dataf_raw);
      break;
    case 2: // DEFINITIVO 2 ANOS - Inciso V
      inciso_atual = "Lei 11175/2019, Art. 2¬∫, Inciso V - n√∫mero de servidores efetivos insuficiente para a continuidade dos servi√ßos p√∫blicos essenciais.";
      repo_dataf_texto = 'a reposi√ß√£o por efetivo';
      break;
    case 3: // TEMPOR√ÅRIO 4 ANOS - Inciso VI
      inciso_atual = "Lei 11175/2019, Art. 2¬∫, inciso VI: car√™ncia de pessoal para o desempenho de atividades sazonais, projetos tempor√°rios ou emergenciais que n√£o justifiquem a cria√ß√£o de cargo efetivo.";
      if (!repo_dataf_raw) {
        throw new Error("Data fim da reposi√ß√£o n√£o informada para inciso tempor√°rio.");
      }
      repo_dataf_texto = formatInputDate(repo_dataf_raw);
      break;
    default:
      throw new Error("Op√ß√£o de inciso inv√°lida. Por favor, selecione uma op√ß√£o v√°lida para o inciso.");
  }
  return { inciso_atual, repo_dataf_texto };
}

/**
 * Determines the normalized plant√£o string based on the numeric input.
 * @param {number} plantao_sim_value The numeric value of the plant√£o option.
 * @returns {string} The normalized plant√£o string.
 * @throws {Error} If the plant√£o option is invalid.
 */
function getPlantaoInput(plantao_sim_value) {
  switch (plantao_sim_value) {
    case 1:
      return "N√ÉO SE APLICA";
    case 2:
      return "Plant√µes Dias de Semana";
    case 3:
      return "Plant√µes Fds";
    case 4:
      return "Plant√µes Dias de Semana + 1Fds";
    default:
      throw new Error("Op√ß√£o de plant√£o inv√°lida. Opera√ß√£o cancelada.");
  }
}

/**
 * Searches the 'Simulador cadm 01/12/2024' sheet for matching data.
 * @param {Object} criteria The search criteria (cargo, area, equipe, plantao, classificacao, cargaHoraria).
 * @returns {Object} An object containing the found simulated data (vencimentof, abonof, etc.).
 * @throws {Error} If the simulator sheet is not found or no matching data is found.
 */
function getSimuladorData(criteria) {
  const ssSimulador = SpreadsheetApp.getActiveSpreadsheet();
  const abaSimulador = ssSimulador.getSheetByName("Simulador cadm 01/12/2024");

  if (!abaSimulador) {
    throw new Error("Erro: Aba 'Simulador cadm 01/12/2024' n√£o encontrada na planilha. Verifique o nome da aba.");
  }

  const dadosSimulador = abaSimulador.getDataRange().getValues();
  let dadosEncontrados = {};
  let dadosSimuladorEncontrados = false;

  const normalizedCriteria = {
    cargo: normalizeString(criteria.cargo),
    area: normalizeString(criteria.area),
    equipe: normalizeString(criteria.equipe),
    plantao: normalizeString(criteria.plantao),
    classificacao: normalizeString(criteria.classificacao),
    cargaHoraria: normalizeString(criteria.cargaHoraria)
  };

  for (let i = 0; i < dadosSimulador.length; i++) {
    const simuladorProfissional = normalizeString(dadosSimulador[i][0]);
    const simuladorArea = normalizeString(dadosSimulador[i][1]);
    const simuladorEquipe = normalizeString(dadosSimulador[i][2]);
    const simuladorPlantao = normalizeString(dadosSimulador[i][3]);
    const simuladorClassificacao = normalizeString(dadosSimulador[i][4]);
    const simuladorCargaHoraria = normalizeString(dadosSimulador[i][5]);

    if (simuladorProfissional === normalizedCriteria.cargo &&
        simuladorArea === normalizedCriteria.area &&
        simuladorEquipe === normalizedCriteria.equipe &&
        simuladorPlantao === normalizedCriteria.plantao &&
        simuladorClassificacao === normalizedCriteria.classificacao &&
        simuladorCargaHoraria === normalizedCriteria.cargaHoraria) {

      dadosEncontrados = {
        vencimentof: dadosSimulador[i][6],
        abonof: dadosSimulador[i][7],
        plantdds_f: dadosSimulador[i][8],
        plantddsfds_f: dadosSimulador[i][9],
        plantfds_f: dadosSimulador[i][10],
        redecomp_f: dadosSimulador[i][11],
        insalub_f: dadosSimulador[i][12],
        premio_f: dadosSimulador[i][13],
        compenfer_f: dadosSimulador[i][14],
        remun_b: dadosSimulador[i][15],
        custom: dadosSimulador[i][21],
        custoa: dadosSimulador[i][22]
      };
      dadosSimuladorEncontrados = true;
      break;
    }
  }

  if (!dadosSimuladorEncontrados) {
    throw new Error("Erro: N√£o existe essa combina√ß√£o de crit√©rios (Cargo, √Årea, Equipe, Plant√£o, Classifica√ß√£o, Carga Hor√°ria) na aba 'Simulador cadm 01/12/2024'. Verifique os dados das colunas A a F.");
  }
  return dadosEncontrados;
}


// Refactored `despacho()`
function despacho(){
  const ui = SpreadsheetApp.getUi();
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sh = ss.getActiveSheet();
  const activeRowIndex = sh.getActiveRange().getRow();
  const motivo = sh.getRange(activeRowIndex, 21).getValue();
  const motivoNormalizado = normalizeString(motivo);

  const processFunctions = {
    "RESCIS√ÉO CONTRATUAL": processarResci_Termi,
    "T√âRMINO CONTRATUAL": processarResci_Termi, // Both map to the same function
    "FALECIMENTO": processar_falecimento,
    "APOSENTADORIA": processar_aposent, // Uncomment if function is provided
    "EXONERA√á√ÉO": processar_exo,       // Uncomment if function is provided
    "MOVIMENTA√á√ÉO": processar_movi      // Uncomment if function is provided
  };

  const funcToCall = processFunctions[motivoNormalizado];

  if (funcToCall) {
    funcToCall();
  } else {
    showErrorAlert(ui, `O motivo "${motivo}" na Coluna U da linha selecionada n√£o corresponde a um tipo de despacho padronizado.`);
  }
}

// Refactored `processarResci_Termi()`
function processarResci_Termi() {
  const ui = SpreadsheetApp.getUi();
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sh = ss.getActiveSheet();

  const activeRowIndex = validateActiveRow(sh, ui, "CDC");
  if (activeRowIndex === null) return;

  const selectedRowData = sh.getRange(activeRowIndex, 1, 1, sh.getLastColumn()).getValues()[0];
  const initialData = extractInitialData(selectedRowData);

  if (!validateInitialData(ui, initialData)) return;

  const htmlTemplate = HtmlService.createTemplateFromFile('SidebarRescisao');
  htmlTemplate.initialData = JSON.stringify(initialData);
  const htmlOutput = htmlTemplate.evaluate()
    .setTitle('Despacho de Rescis√£o/T√©rmino Contratual')
    .setWidth(300);
  ui.showSidebar(htmlOutput);
}

// Refactored `processarDadosRescisaoSidebar()`
function processarDadosRescisaoSidebar(formData, initialDataStr) {
  const ui = SpreadsheetApp.getUi();
  const initialData = JSON.parse(initialDataStr);

  const impacto = parseInt(formData.impacto);
  const impacto_ccg = formData.impacto_ccg;
  const mat = formData.mat;
  const plantao_sim_value = parseInt(formData.plantao_sim);
  const inciso_sim_value = parseInt(formData.inciso_sim);

  let impacto_novo;
  if (impacto === 1) {
    impacto_novo = "sem impacto";
  } else if (impacto === 2) {
    if (!impacto_ccg) {
      throw new Error("CCG n√£o informada. Opera√ß√£o cancelada.");
    }
    impacto_novo = "com impacto, CCG " + impacto_ccg;
  } else {
    throw new Error("Op√ß√£o de impacto inv√°lida. Por favor, digite 1 ou 2.");
  }

  const { inciso_atual, repo_dataf_texto } = getIncisoDetails(inciso_sim_value, formData.repo_dataf);
  const data_termino_formatada = formatInputDate(formData.data);
  const plantao_input = getPlantaoInput(plantao_sim_value);

  // Altera√ß√£o para que o cargo seja "T√âCNICO EM ENFERMAGEM" se a especialidade for "T√âCNICO EM ENFERMAGEM"
  let cargo_for_simulador = initialData.cargo_cdc_achado;
  if (normalizeString(initialData.especialidade_cdc_achado) === "T√âCNICO EM ENFERMAGEM") {
      cargo_for_simulador = "T√âCNICO EM ENFERMAGEM";
  }

  const simuladorCriteria = {
    cargo: cargo_for_simulador, // Usando o cargo potencialmente modificado
    area: initialData.area_at_cdc_achado,
    equipe: initialData.equipe_cdc_achado,
    plantao: plantao_input,
    classificacao: initialData.clas_cdc_achado,
    cargaHoraria: initialData.cargaH_cdc_achado
  };

  const { vencimentof, abonof, plantdds_f, plantddsfds_f, plantfds_f, redecomp_f,
          insalub_f, premio_f, compenfer_f, remun_b, custom, custoa } = getSimuladorData(simuladorCriteria);

  const despacho =
    `Fica autorizado at√© ${repo_dataf_texto}, ${impacto_novo}, em raz√£o de ${initialData.mot_cont_achado} em ${data_termino_formatada} do profissional ${initialData.prof_saiu}, MAT ${mat}, ${initialData.cargo_cdc_achado}, ${initialData.especialidade_cdc_achado}, ${initialData.equipe_cdc_achado}, ${initialData.cargaH_cdc_achado}, ${initialData.unidade_achado}.\n` +
    `Motivo da contrata√ß√£o: ${inciso_atual}\n\n` +
    `Vencimento: ${vencimentof}\n` +
    `Abono de fixa√ß√£o: ${abonof}\n` +
    `Rede complementar: ${redecomp_f}\n` +
    `Insalubridade: ${insalub_f}\n` +
    `Pr√™mio Pr√≥-Fam√≠lia: ${premio_f}\n` +
    `Plant√£o dia de semana: ${plantdds_f}\n` +
    `Plant√£o dia de semana + 1 Fds: ${plantddsfds_f}\n` +
    `Plant√£o fim de semana: ${plantfds_f}\n` +
    `Complementa√ß√£o enfermagem: ${compenfer_f}\n` +
    `Remunera√ß√£o (bruto): ${remun_b}\n` +
    `Custo mensal: ${custom}\n` +
    `Custo anual: ${custoa}\n\n` +
    `;${impacto_ccg};${initialData.cargo_cdc_achado};${initialData.especialidade_cdc_achado};${initialData.equipe_cdc_achado};` +
    `${initialData.cargaH_cdc_achado};${initialData.unidade_achado};`;

  return despacho;
}

// Refactored `processar_falecimento()`
function processar_falecimento() {
  const ui = SpreadsheetApp.getUi();
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sh = ss.getActiveSheet();

  const activeRowIndex = validateActiveRow(sh, ui, "CDC");
  if (activeRowIndex === null) return;

  const selectedRowData = sh.getRange(activeRowIndex, 1, 1, sh.getLastColumn()).getValues()[0];
  const initialData = extractInitialData(selectedRowData);

  if (!validateInitialData(ui, initialData)) return;

  const htmlTemplate = HtmlService.createTemplateFromFile('SidebarFalecimento');
  htmlTemplate.initialData = JSON.stringify(initialData);
  const htmlOutput = htmlTemplate.evaluate()
      .setTitle('Despacho de Falecimento')
      .setWidth(300);
  ui.showSidebar(htmlOutput);
}

// Refactored `processarDadosFalecimentoSidebar()`
function processarDadosFalecimentoSidebar(formData, initialDataStr) {
  const ui = SpreadsheetApp.getUi();
  const initialData = JSON.parse(initialDataStr);

  const impacto = parseInt(formData.impacto);
  const impacto_ccg = formData.impacto_ccg;
  const mat = formData.mat;
  const plantao_sim_value = parseInt(formData.plantao_sim);
  const inciso_sim_value = parseInt(formData.inciso_sim);

  let impacto_novo;
  if (impacto === 1) {
    impacto_novo = "sem impacto";
  } else if (impacto === 2) {
    if (!impacto_ccg) {
      throw new Error("CCG n√£o informada. Opera√ß√£o cancelada.");
    }
    impacto_novo = "com impacto, CCG " + impacto_ccg;
  } else {
    throw new Error("Op√ß√£o de impacto inv√°lida. Por favor, digite 1 ou 2.");
  }

  const dataFormatted = formatInputDate(formData.data);
  const { inciso_atual, repo_dataf_texto } = getIncisoDetails(inciso_sim_value, formData.repo_dataf);
  const plantao_input = getPlantaoInput(plantao_sim_value);

  // Altera√ß√£o para que o cargo seja "T√âCNICO EM ENFERMAGEM" se a especialidade for "T√âCNICO EM ENFERMAGEM"
  let cargo_for_simulador = initialData.cargo_cdc_achado;
  if (normalizeString(initialData.especialidade_cdc_achado) === "T√âCNICO EM ENFERMAGEM") {
      cargo_for_simulador = "T√âCNICO EM ENFERMAGEM";
  }

  const simuladorCriteria = {
    cargo: cargo_for_simulador, // Usando o cargo potencialmente modificado
    area: initialData.area_at_cdc_achado,
    equipe: initialData.equipe_cdc_achado,
    plantao: plantao_input,
    classificacao: initialData.clas_cdc_achado,
    cargaHoraria: initialData.cargaH_cdc_achado
  };

  const { vencimentof, abonof, plantdds_f, plantddsfds_f, plantfds_f, redecomp_f,
          insalub_f, premio_f, compenfer_f, remun_b, custom, custoa } = getSimuladorData(simuladorCriteria);

  const despacho =
    `Fica autorizado at√© ${repo_dataf_texto}, ${impacto_novo}, em raz√£o de falecimento em ${dataFormatted} do profissional ${initialData.prof_saiu}, MAT ${mat}, ${initialData.cargo_cdc_achado}, ${initialData.especialidade_cdc_achado}, ${initialData.equipe_cdc_achado}, ${initialData.cargaH_cdc_achado}, ${initialData.unidade_achado}.\n` +
    `Motivo da contrata√ß√£o: ${inciso_atual}\n\n` +
    `Vencimento: ${vencimentof}\n` +
    `Abono de fixa√ß√£o: ${abonof}\n` +
    `Rede complementar: ${redecomp_f}\n` +
    `Insalubridade: ${insalub_f}\n` +
    `Pr√™mio Pr√≥-Fam√≠lia: ${premio_f}\n` +
    `Plant√£o dia de semana: ${plantdds_f}\n` +
    `Plant√£o dia de semana + 1 Fds: ${plantddsfds_f}\n` +
    `Plant√£o fim de semana: ${plantfds_f}\n` +
    `Complementa√ß√£o enfermagem: ${compenfer_f}\n` +
    `Remunera√ß√£o (bruto): ${remun_b}\n` +
    `Custo mensal: ${custom}\n` +
    `Custo anual: ${custoa}\n\n` +
    `;${impacto_ccg};${initialData.cargo_cdc_achado};${initialData.especialidade_cdc_achado};${initialData.equipe_cdc_achado};` +
    `${initialData.cargaH_cdc_achado};${initialData.unidade_achado};`;

  return despacho;
}

// Placeholder functions as they were mentioned but not fully provided in the original text
function processar_aposent() {
  const ui = SpreadsheetApp.getUi();
  showErrorAlert(ui, "Fun√ß√£o para aposentadoria ainda n√£o implementada.");
}

function processar_exo() {
  const ui = SpreadsheetApp.getUi();
  showErrorAlert(ui, "Fun√ß√£o para exonera√ß√£o ainda n√£o implementada.");
}

function processar_movi() {
  const ui = SpreadsheetApp.getUi();
  showErrorAlert(ui, "Fun√ß√£o para movimenta√ß√£o ainda n√£o implementada.");
}